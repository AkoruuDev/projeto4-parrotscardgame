# Requisitos

- Geral
    - [ ]  Não utilize nenhuma biblioteca para implementar este projeto (jquery, lodash, react, etc), nem outras linguagens que compilem para JS (TypeScript, ELM, etc), somente JavaScript puro
    - [ ]  Seu projeto deverá ser desenvolvido utilizando Git e GitHub, em um repositório público
    - [ ]  **A cada requisito implementado** faça um commit com uma mensagem descritiva do que você evoluiu
- Layout
    - [ ]  Aplicar layout para desktop e mobile, seguindo o layout no diretorio abaixo
    
    ./layout/(desktop.png/mobile.png)
    
- Distribuição de cartas
    - [ ]  Ao entrar no jogo, o usuário deverá ser perguntado com quantas cartas quer jogar (utilize `prompt`)
    - [ ]  O usuário só poderá inserir números pares no `prompt`, de 4 a 14. Qualquer número que fuja a essa regra não deve ser aceito. No caso de números inválidos, o `prompt` deverá ficar sendo repetido, até que o usuário coloque um número válido.
    - [ ]  Após inserir um número de cartas válido, o jogo deverá inserir as cartas viradas pra baixo na página de forma que a distribuição seja aleatória
        
        **Dica**: para embaralhar uma array, utilize o código abaixo:
        
    || ==================================================================================== ||
    ||    minhaArray.sort(comparador); // Após esta linha, a minhaArray estará embaralhada  ||
    ||                                                                                      ||
    ||    // Esta função pode ficar separada do código acima, onde você preferir            ||
    ||    function comparador() {                                                           ||  
    ||    	return Math.random() - 0.5;                                                     ||
    ||    }                                                                                 ||
    || ==================================================================================== ||
        
- Clique na carta
    - [ ]  Ao clicar em uma carta, a mesma deve ser virada
    - [ ]  Caso seja a primeira carta do par, ela deve permanecer virada até o usuário escolher a segunda carta
    - [ ]  Caso seja a segunda carta virada, existem 2 situações:
        - [ ]  Caso seja igual à primeira carta, o usuário acertou e ambas agora devem ficar viradas pra cima até o final do jogo
        - [ ]  Caso seja uma carta diferente da primeira carta virada, o usuário errou. Nesse caso, o jogo deve **aguardar 1 segundo** e então virar as duas cartas para baixo novamente
    - [ ]  **Dica**: se quiser fazer o efeito 3D da carta virando, você pode ver o CSS necesśario em: https://repl.it/@BootcampRespond/FlippedCards#index.html . Só se atente que nesse exemplo a carta vira ao passar o mouse. No caso do jogo, seria ao clicar.
- Fim do Jogo
    - [ ]  Quando o usuário terminar de virar todas as cartas corretamente, **deverá** ser exibido um `alert` com a mensagem **"Você ganhou em X jogadas!"** sendo X **a quantidade de vezes que o usuário virou uma carta no jogo**.
    
- Para correção automática
    
    Para agilizarmos a correção dos projetos e dar um feedback mais rápido para vocês, adicione o que está sendo pedido abaixo nos seus elementos:
    
    - Adicione o atributo `data-identifier="card"` no elemento que representa uma carta
    - Adicione o atributo `data-identifier="back-face"` No elemento que representa a parte de trás da carta
        - Que elemento é esse?
            
            É o elemento que contém o papagaio estático:
            Este elemento **não deve conter** o gif do papagaio, isto é, a face da frente da carta. Isto significa que o atributo deve estar no elemento HTML que contém somente a parte de trás.
            
    
    - Adicione o atritbuto `data-identifier="front-face"` no elemento que representa a parte da frente da carta
        - Que elemento é esse?
            
            É o elemento que contém o gif do papagaio real da carta:
            Este elemento **não deve conter** o papagaio estático, o papagaio verdinho da face de trás. Isto significa que o atributo deve estar no elemento HTML que contém somente a parte da frente.
            
    - **Atenção**! Cada clique é uma jogada.
    
    Com as configurações acima conseguimos automatizar parte da correção do projeto, acelerando o feedback.